[tool.poetry]
name = "ssb-fagfunksjoner"
version = "1.0.2"
description = "Fellesfunksjoner for ssb i Python"
authors = ["SSB-pythonistas <ssb-pythonistas@ssb.no>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/statisticsnorway/ssb-fagfunksjoner"
repository = "https://github.com/statisticsnorway/ssb-fagfunksjoner"
documentation = "https://statisticsnorway.github.io/ssb-fagfunksjoner"
packages = [{ include = "fagfunksjoner", from = "src" }]
classifiers = ["Development Status :: 4 - Beta"]

[tool.poetry.urls]
Changelog = "https://github.com/statisticsnorway/ssb-fagfunksjoner/releases"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
dapla-toolbelt = ">=2.0.19"
ipykernel = ">=6.15.3"
pandas = ">=2.0.0"
requests = ">=2.31.0"
toml = ">=0.10.2"
beautifulsoup4 = ">=4.12.2"
python-dotenv = ">=1.0.0"
SQLAlchemy = ">=1.3.19"
saspy = ">=5.2.1"
ipywidgets = ">=8.1.1"
pyarrow = ">=14.0.1"
openpyxl = ">=3.1.5"
oracledb = ">=2.3.0"
chardet = ">=5.2.0"
colorama = ">=0.4.6"
# Stubs for Mypy
pandas-stubs = "<=2.2.2.240603"  # Workaround until https://github.com/pandas-dev/pandas-stubs/issues/970 is fixed
types-requests = ">=2.31.0.10"
types-toml = ">=0.10.8.7"
types-beautifulsoup4 = ">=4.12.0.20240511"
types-colorama = ">=0.4.15.20240205"
types-openpyxl = ">=3.1.5.20240719"
pyarrow-stubs = ">=10.0.1.9"




[tool.poetry.group.dev.dependencies]
pygments = ">=2.10.0"
black = { extras = ["jupyter"], version = ">=23.1.0" }
coverage = { extras = ["toml"], version = ">=6.2" }
darglint = ">=1.8.1"
furo = ">=2021.11.12"
isort = ">=5.10.1"
mypy = ">=0.930"
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
ruff = ">=0.0.284"
pytest = ">=6.2.5"
sphinx = ">=6.2.1"
sphinx-autobuild = ">=2021.3.14"
sphinx-autodoc-typehints = ">=1.24.0"
sphinx-click = ">=3.0.2"
typeguard = ">=2.13.3"
xdoctest = { extras = ["colors"], version = ">=0.15.10" }
myst-parser = { version = ">=0.16.1" }
responses = ">=0.25.3"

[tool.pytest.ini_options]
pythonpath = ["src"]

[tool.poetry.scripts]
ssb-fagfunksjoner = "fagfunksjoner.__main__:main"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["fagfunksjoner", "tests"]
relative_files = true

[tool.coverage.report]
show_missing = true
fail_under = 50

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true
exclude = ["tests", "docs", "noxfile.py"]

[[tool.mypy.overrides]]
module = [
    "ipywidgets.*",
    "saspy.*",
]
ignore_missing_imports = true

[tool.isort]
profile = "black"
skip_gitignore = true
lines_after_imports = 2
# The line below is needed for jupyter notebooks stored as .py in percent format.
# See https://github.com/PyCQA/isort/issues/1338 for details
treat_comments_as_code = ["# %%"]

[tool.ruff]
force-exclude = true  # Apply excludes to pre-commit
show-fixes = true
src = ["src", "tests"]
target-version = "py310"  # Minimum Python version supported
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
extend-exclude = [
    "__pycache__",
    "old",
    ".ipynb_checkpoints",
    "noxfile.py",
    "docs/conf.py",
]

# Ruff rules may be customized as desired: https://docs.astral.sh/ruff/rules/
[tool.ruff.lint]
select = [
    "A",    # prevent using keywords that clobber python builtins
    "ANN",  # check type annotations
    "B",    # bugbear: security warnings
    "D",    # documentation
    "E",    # pycodestyle
    "F",    # pyflakes
    "ISC",  # implicit string concatenation
    "UP",   # alert you when better syntax is available in your python version
    "RUF",  # the ruff developer's own rules
]
ignore = [
    "ANN101", # Supress missing-type-self.
    "ANN102", # Supress missing-type-cls.
    "ANN202", # Don't requiere return type annotation for private functions.
    "ANN401", # Allow type annotation with type Any.
    "D100",   # Supress undocumented-public-module. Only doc of public api required.
    "E402",   # Supress module-import-not-at-top-of-file, needed in jupyter notebooks.
    "E501",   # Supress line-too-long warnings: trust black's judgement on this one.
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google"  # You can also use "numpy".

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "validator", "root_validator", "pydantic.validator"]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"**/tests/*" = [
    "ANN001",  # type annotations don't add value for test functions
    "ANN002",  # type annotations don't add value for test functions
    "ANN003",  # type annotations don't add value for test functions
    "ANN201",  # type annotations don't add value for test functions
    "ANN204",  # type annotations don't add value for test functions
    "ANN205",  # type annotations don't add value for test functions
    "ANN206",  # type annotations don't add value for test functions
    "D100",    # docstrings are overkill for test functions
    "D101",
    "D102",
    "D103",
    "S101",    # asserts are encouraged in pytest
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
